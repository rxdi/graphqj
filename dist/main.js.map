{"version":3,"sources":["helpers/args-extractors.ts","helpers/typescript.builder.ts","helpers/set-config.ts","helpers/basic.template.ts","helpers/advanced-schema.ts","helpers/basic-schema.ts","app/app.module.ts","main.ts"],"names":[],"mappings":"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","file":"main.js","sourceRoot":"../src","sourcesContent":["export const includes = i => process.argv.toString().includes(i);\nexport const nextOrDefault = (i, fb: any = true, type = p => p) => {\n  if (process.argv.toString().includes(i)) {\n    const isNextArgumentPresent = process.argv[process.argv.indexOf(i) + 1];\n    if (!isNextArgumentPresent) {\n      return fb;\n    }\n    if (isNextArgumentPresent.includes('--')) {\n      return fb;\n    }\n    return type(isNextArgumentPresent);\n  }\n  return fb;\n};\n","import { spawn } from 'child_process';\n\nexport const TranspileTypescript = (paths: string[], outDir: string) => {\n  return new Promise((resolve, reject) => {\n    const child = spawn('npx', [\n      'gapi',\n      'build',\n      '--glob',\n      `${paths.toString()}`,\n      '--outDir',\n      outDir\n    ]);\n    // child.stdout.pipe(process.stdout);\n    child.stderr.pipe(process.stderr);\n    child.on('close', (code: number) => resolve(code));\n  });\n};\n","import { promisify } from 'util';\nimport { exists, Stats, writeFile, stat, readFile, unlink } from 'fs';\nimport { TranspileTypescript } from './typescript.builder';\nimport { join } from 'path';\n\nexport async function getConfig(configFilename: string) {\n  let config;\n  try {\n    config = require('esm')(module)(\n      join(process.cwd(), `${configFilename}.js`)\n    );\n  } catch (e) {}\n  if (await promisify(exists)(`./${configFilename}.ts`)) {\n    const isMigrateTempConfigExists = await promisify(exists)(\n      './.gj/config.temp'\n    );\n    const TranspileAndWriteTemp = async (stats: Stats) => {\n      await TranspileTypescript([`/${configFilename}.ts`], './.gj');\n      console.log('Transpile complete!');\n      await promisify(writeFile)(\n        './.gj/config.temp',\n        stats.mtime.toISOString(),\n        { encoding: 'utf-8' }\n      );\n    };\n    const stats = await promisify(stat)(`./${configFilename}.ts`);\n    if (isMigrateTempConfigExists) {\n      const temp = await promisify(readFile)('./.gj/config.temp', {\n        encoding: 'utf-8'\n      });\n      if (new Date(temp).toISOString() !== stats.mtime.toISOString()) {\n        console.log(`${configFilename} configuration is new transpiling...`);\n        await TranspileAndWriteTemp(stats);\n      }\n    } else {\n      console.log(`Transpile ${configFilename}.ts...`);\n      await TranspileAndWriteTemp(stats);\n    }\n    config = require(join(process.cwd(), `./.gj`, `${configFilename}.js`));\n\n    try {\n      await promisify(unlink)(join('./.gj', `${configFilename}.js.map`));\n    } catch (e) {}\n  }\n  try {\n    config = JSON.parse(\n      await promisify(readFile)(join(process.cwd(), `${configFilename}.json`), {\n        encoding: 'utf-8'\n      })\n    );\n  } catch (e) {}\n\n  return config;\n}\n","export const basicTemplate = {\n  $mode: 'basic',\n  $types: {\n    user: {\n      pesho: 'string'\n    }\n  },\n  $schema: './schema.graphql',\n  $resolvers: {\n    findUser: {\n      gosho: 'omg',\n      pesho: 515151,\n      pesho2: 515151,\n      pesho3: 515151,\n      dadadada: 515151,\n      pesho4: 515151,\n      pesho5: [515151],\n      pesho6: ['515151']\n    },\n    findUser2: {\n      gosho: 'omg',\n      pesho: 22,\n      pesho2: 515151,\n      pesho3: 515151,\n      pesho4: 515151,\n      pesho5: 515151\n    }\n  }\n};\n","import {\n  GraphQLString,\n  GraphQLList,\n  GraphQLInt,\n  GraphQLObjectType\n} from 'graphql';\n\nexport function MakeAdvancedSchema(config, bootstrap) {\n  const types = {};\n\n  Object.keys(config.$types).forEach(type => {\n    if (types[type]) {\n      return;\n    }\n    Object.keys(config.$types[type]).forEach(key => {\n      types[type] = types[type] || {};\n      if (config.$types[type][key] === 'string') {\n        types[type][key] = { type: GraphQLString };\n      }\n      if (config.$types[type][key] === 'string[]') {\n        types[type][key] = { type: new GraphQLList(GraphQLString) };\n      }\n      if (config.$types[type][key] === 'number') {\n        types[type][key] = { type: GraphQLInt };\n      }\n      if (config.$types[type][key] === 'number[]') {\n        types[type][key] = { type: new GraphQLList(GraphQLInt) };\n      }\n    });\n    types[type] = new GraphQLObjectType({\n      name: type,\n      fields: types[type]\n    });\n  });\n\n  Object.keys(config.$resolvers).forEach(method_name => {\n    const resolve = config.$resolvers[method_name].resolve;\n    const type = config.$resolvers[method_name].type;\n    if (!types[type]) {\n      throw new Error(\n        `Missing type '${type}', Available types: '${Object.keys(\n          types\n        ).toString()}'`\n      );\n    }\n    bootstrap.Fields.query[method_name] = {\n      type: types[type],\n      method_name,\n      public: true,\n      method_type: 'query',\n      target: () => {},\n      resolve: typeof resolve === 'function' ? resolve : () => resolve\n    } as any;\n  });\n}\n","import {\n  GraphQLString,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLObjectType\n} from 'graphql';\n\nexport function MakeBasicSchema(config, bootstrap) {\n  Object.keys(config.$resolvers).forEach(method_name => {\n    const resolve = config.$resolvers[method_name];\n    const fields = {};\n    const args = {};\n\n    Object.keys(resolve).forEach(key => {\n      if (typeof resolve[key] === 'string') {\n        fields[key] = { type: GraphQLString };\n      }\n\n      if (typeof resolve[key] === 'number') {\n        fields[key] = { type: GraphQLInt };\n      }\n      if (typeof resolve[key] !== 'string' && resolve[key].length) {\n        if (typeof resolve[key][0] === 'string') {\n          fields[key] = { type: new GraphQLList(GraphQLString) };\n        }\n\n        if (typeof resolve[key][0] === 'number') {\n          fields[key] = { type: new GraphQLList(GraphQLInt) };\n        }\n      }\n    });\n    bootstrap.Fields.query[method_name] = {\n      type: new GraphQLObjectType({\n        name: `${method_name}_type`,\n        fields: () => fields\n      }),\n      args,\n      method_name,\n      public: true,\n      method_type: 'query',\n      target: () => {},\n      resolve: typeof resolve === 'function' ? resolve : () => resolve\n    } as any;\n  });\n}\n","import {\n  Module,\n  SCHEMA_OVERRIDE,\n  BootstrapService,\n  GraphQLSchema,\n  printSchema,\n  buildSchema,\n  mergeSchemas\n} from '@gapi/core';\nimport { writeFile, readFileSync } from 'fs';\nimport { promisify } from 'util';\nimport { includes, nextOrDefault } from '../helpers/args-extractors';\nimport { VoyagerModule } from '@gapi/voyager';\nimport { getConfig } from '../helpers/set-config';\nimport { basicTemplate } from '../helpers/basic.template';\nimport { MakeAdvancedSchema } from '../helpers/advanced-schema';\nimport { MakeBasicSchema } from '../helpers/basic-schema';\nimport { join } from 'path';\n\n@Module({\n  imports: [VoyagerModule.forRoot()],\n  providers: [\n    {\n      provide: SCHEMA_OVERRIDE,\n      useFactory: () => (schema: GraphQLSchema) => {\n        let externalSchema;\n        try {\n          const config = JSON.parse(\n            readFileSync(join(process.cwd(), 'gj.json'), {\n              encoding: 'utf-8'\n            })\n          );\n          config.$schema = config.$schema || nextOrDefault('--schema', false);\n          if (config.$schema) {\n            externalSchema = readFileSync(config.$schema, {\n              encoding: 'utf-8'\n            });\n            externalSchema = buildSchema(externalSchema)\n          }\n        } catch (e) {}\n        const mergedSchemas = mergeSchemas({\n          schemas: [externalSchema, schema].filter(i => !!i)\n        });\n        if (includes('--verbose')) {\n          console.log(`\nSchema:\n${printSchema(mergedSchemas)}\n                  `);\n        }\n\n        if (process.argv.toString().includes('--generate')) {\n          promisify(writeFile)('./schema.graphql', printSchema(mergedSchemas), {\n            encoding: 'utf-8'\n          }).then(() => {\n            console.log('Schema created!');\n            process.exit(0);\n          });\n        } else {\n          console.log(\n            'You can extract this schema by running --extract command'\n          );\n        }\n        return mergedSchemas;\n      }\n    },\n    {\n      provide: 'createFields',\n      deps: [BootstrapService],\n      lazy: true,\n      useFactory: async (bootstrap: BootstrapService) => {\n        let config = await getConfig(\n          nextOrDefault('--config', 'graphqj-config')\n        );\n        if (!config) {\n          config = await getConfig('gj');\n        }\n        if (!config) {\n          config = basicTemplate;\n        }\n        config = config['default'] || config;\n\n        if (config.$mode === 'basic') {\n          MakeBasicSchema(config, bootstrap);\n        }\n\n        if (config.$mode === 'advanced') {\n          MakeAdvancedSchema(config, bootstrap);\n        }\n        return true;\n      }\n    }\n  ]\n})\nexport class AppModule {}\n","import { BootstrapFramework } from '@rxdi/core';\nimport { AppModule } from './app/app.module';\nimport { CoreModule } from '@gapi/core';\nimport { nextOrDefault, includes } from './helpers/args-extractors';\nimport { writeFile } from 'fs';\nimport { promisify } from 'util';\n\nif (includes('init')) {\n  if (includes('advanced')) {\n    promisify(writeFile)(\n      './gj.json',\n      `\n{\n  \"$mode\": \"advanced\",\n  \"$types\": {\n    \"user\": {\n      \"name\": \"string\",\n      \"email\": \"string\",\n      \"phone\": \"number\",\n      \"arrayOfNumbers\": \"number[]\",\n      \"arrayOfStrings\": \"string[]\"\n    }\n  },\n  \"$resolvers\": {\n    \"findUser\": {\n      \"type\": \"user\",\n      \"resolve\": {\n        \"name\": \"Kristiyan Tachev\",\n        \"email\": \"test@gmail.com\",\n        \"phone\": 414141,\n        \"arrayOfNumbers\": [515151, 412414],\n        \"arrayOfStrings\": [\"515151\", \"412414\"]\n      }\n    }\n  }\n}`,\n      { encoding: 'utf-8' }\n    );\n  } else {\n    promisify(writeFile)(\n      './gj.json',\n      `\n{\n  \"$mode\": \"basic\",\n  \"$resolvers\": {\n    \"findUser\": {\n      \"name\": \"Kristiyan Tachev\",\n      \"email\": \"test@gmail.com\",\n      \"phone\": 414141,\n      \"arrayOfNumbers\": [515151, 412414],\n      \"arrayOfStrings\": [\"515151\", \"412414\"]\n    }\n  }\n}\n`,\n      { encoding: 'utf-8' }\n    );\n  }\n} else {\n  BootstrapFramework(AppModule, [\n    CoreModule.forRoot({\n      graphql: {\n        openBrowser: nextOrDefault('--random', true, (v) => v === 'true' ? false : true)\n      },\n      server: {\n        randomPort: nextOrDefault('--random', false),\n        hapi: {\n          port: nextOrDefault('--port', 9000, p => Number(p))\n        }\n      }\n    })\n  ]).subscribe(() => console.log('Started'), console.log.bind(console));\n}\n"]}