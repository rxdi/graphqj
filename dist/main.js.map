{"version":3,"sources":["helpers/args-extractors.ts","helpers/typescript.builder.ts","helpers/set-config.ts","helpers/basic.template.ts","app/app.tokens.ts","helpers/parse-ast.ts","helpers/parse-args-schema.ts","helpers/parse-types.schema.ts","helpers/isFunction.ts","helpers/advanced-schema.ts","helpers/basic-schema.ts","helpers/transpiler-cache.ts","helpers/transpile-and-load.ts","helpers/is-array.ts","helpers/traverse/traverse-array.ts","helpers/is-invalid-path.ts","helpers/traverse-map.ts","helpers/load-file.ts","helpers/traverse/traverse-object.ts","helpers/traverse/traverse.ts","helpers/watch-bundles.ts","app/app.module.ts","helpers/self-child.ts","main.ts"],"names":[],"mappings":"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","file":"main.js","sourceRoot":"../src","sourcesContent":["export const includes = i => process.argv.toString().includes(i);\nexport const nextOrDefault = (i, fb: any = true, type = p => p) => {\n  if (process.argv.toString().includes(i)) {\n    const isNextArgumentPresent = process.argv[process.argv.indexOf(i) + 1];\n    if (!isNextArgumentPresent) {\n      return fb;\n    }\n    if (isNextArgumentPresent.includes('--')) {\n      return fb;\n    }\n    return type(isNextArgumentPresent);\n  }\n  return fb;\n};\n","import { spawn } from 'child_process';\n\nexport const TranspileTypescript = (paths: string[], outDir: string) => {\n  return new Promise((resolve, reject) => {\n    const child = spawn('npx', [\n      'gapi',\n      'build',\n      '--glob',\n      `${paths.toString()}`,\n      '--outDir',\n      outDir\n    ]);\n    // child.stdout.pipe(process.stdout);\n    child.stderr.pipe(process.stderr);\n    child.on('close', (code: number) => resolve(code));\n  });\n};\n","import { promisify } from 'util';\nimport { exists, Stats, writeFile, stat, readFile, unlink, readFileSync } from 'fs';\nimport { TranspileTypescript } from './typescript.builder';\nimport { join } from 'path';\nimport { load } from 'js-yaml';\n\nexport async function getConfig(configFilename: string) {\n  let config;\n  try {\n    config = require('esm')(module)(\n      join(process.cwd(), `${configFilename}.js`)\n    );\n    // console.log('JS Config', config)\n  } catch (e) {}\n  if (await promisify(exists)(`./${configFilename}.yml`)) {\n    const file = readFileSync(`./${configFilename}.yml`, {encoding: 'utf-8'})\n    config = load(file);\n    // console.log('YML Config', config)\n  }\n  if (await promisify(exists)(`./${configFilename}.ts`)) {\n    // console.log('Typescript Config', config)\n    const isMigrateTempConfigExists = await promisify(exists)(\n      './.gj/config.temp'\n    );\n    const TranspileAndWriteTemp = async (stats: Stats) => {\n      await TranspileTypescript([`/${configFilename}.ts`], './.gj');\n      // console.log('Transpile complete!');\n      await promisify(writeFile)(\n        './.gj/config.temp',\n        stats.mtime.toISOString(),\n        { encoding: 'utf-8' }\n      );\n    };\n    const stats = await promisify(stat)(`./${configFilename}.ts`);\n    if (isMigrateTempConfigExists) {\n      const temp = await promisify(readFile)('./.gj/config.temp', {\n        encoding: 'utf-8'\n      });\n      if (new Date(temp).toISOString() !== stats.mtime.toISOString()) {\n        // console.log(`${configFilename} configuration is new transpiling...`);\n        await TranspileAndWriteTemp(stats);\n      }\n    } else {\n      // console.log(`Transpile ${configFilename}.ts...`);\n      await TranspileAndWriteTemp(stats);\n    }\n    config = require(join(process.cwd(), `./.gj`, `${configFilename}.js`));\n\n    try {\n      await promisify(unlink)(join('./.gj', `${configFilename}.js.map`));\n    } catch (e) {}\n  }\n  try {\n    config = JSON.parse(\n      await promisify(readFile)(join(process.cwd(), `${configFilename}.json`), {\n        encoding: 'utf-8'\n      })\n    );\n    // console.log('Json Config', config)\n  } catch (e) {}\n\n  return config;\n}\n","export const basicTemplate = {\n  $mode: 'basic',\n  $types: {\n    user: {\n      pesho: 'string'\n    }\n  },\n  $schema: './schema.graphql',\n  $resolvers: {\n    findUser: {\n      gosho: 'omg',\n      pesho: 515151,\n      pesho2: 515151,\n      pesho3: 515151,\n      dadadada: 515151,\n      pesho4: 515151,\n      pesho5: [515151],\n      pesho6: ['515151']\n    },\n    findUser2: {\n      gosho: 'omg',\n      pesho: 22,\n      pesho2: 515151,\n      pesho3: 515151,\n      pesho4: 515151,\n      pesho5: 515151\n    }\n  }\n};\n","import { InjectionToken } from '@rxdi/core';\nimport { GraphQLInputFieldConfigMap } from 'graphql';\n\nfunction strEnum<T extends string>(o: Array<T>): { [K in T]: K } {\n  return o.reduce((res, key) => {\n    res[key] = key;\n    return res;\n  }, Object.create(null));\n}\n\nexport const BooleanUnion = strEnum([\n  'Boolean',\n  'Bool',\n  'boolean',\n  'Boolean[]',\n  'boolean[]',\n  '[Boolean]',\n  '[Bool]',\n  'boolean!',\n  'Boolean!',\n  '[Boolean]!',\n  'boolean[]!',\n  'Boolean[]!'\n]);\n\nexport const StringUnion = strEnum([\n  'String',\n  'string',\n  'String[]',\n  'string[]',\n  '[String]',\n  'string!',\n  'String!',\n  'String[]!',\n  'string[]!',\n  '[String]!'\n]);\n\nexport const IntegerUnion = strEnum([\n  'Int',\n  'integer',\n  'number',\n  'Number',\n  'Num',\n  'int',\n  'Number[]',\n  'number[]',\n  '[Number]',\n  'number!',\n  '[Int]',\n  'Number!',\n  'number[]!',\n  'Number[]!',\n  '[Number]!',\n  '[Int]!'\n]);\n\nexport type BooleanUnion = keyof typeof BooleanUnion;\nexport type StringUnion = keyof typeof StringUnion;\nexport type IntegerUnion = keyof typeof IntegerUnion;\nexport type GlobalUnion = BooleanUnion | StringUnion | IntegerUnion;\n\nexport const Roots = {\n  booleanNode: BooleanUnion,\n  stringNode: StringUnion,\n  numberNode: IntegerUnion\n};\n\nexport type Args = { [key: string]: GlobalUnion };\nexport type Externals = {\n  map: string;\n  file: string;\n  module?: any;\n  transpiledFile?: string;\n};\n\nexport interface ResolverDependencies {\n  provide: string;\n  map: string;\n  container: any;\n}\nexport interface Config {\n  $mode: 'basic' | 'advanced';\n  $types: { [key: string]: Args };\n  $resolvers: {\n    [key: string]: {\n      type: string;\n      args: Args;\n      resolve: any;\n      deps?: ResolverDependencies[];\n    };\n  };\n  $directives: string;\n  $externals: Externals[];\n  $args: any;\n  $views?: { [key: string]: { query: string; payload: any; html: string } };\n}\n\nexport const TypesToken = new InjectionToken<\n  Map<string, GraphQLInputFieldConfigMap>\n>('(@rxdi/graphqj): types-token');\nexport const ArgumentsToken = new InjectionToken<Map<string, Args>>(\n  '(@rxdi/graphqj): arguments-token'\n);\nexport const ResolversToken = new InjectionToken<Map<string, Args>>(\n  '(@rxdi/graphqj): resolvers-token'\n);\nexport const GuardsToken = new InjectionToken<Map<string, Args>>(\n  '(@rxdi/graphqj): resolvers-token'\n);\nexport const Config = new InjectionToken<Map<string, Args>>();\n\nexport type TypesToken = Map<string, Args>;\nexport type ArgumentsToken = Map<string, Args>;\nexport type ResolversToken = Map<string, Args>;\nexport type GuardsToken = Map<string, Args>;\n","import {\n  GraphQLString,\n  GraphQLBoolean,\n  GraphQLInt,\n  GraphQLNonNull,\n  GraphQLList,\n  GraphQLScalarType,\n  GraphQLType\n} from 'graphql';\nimport { GlobalUnion } from '../app/app.tokens';\n\nexport function ParseArgs(ck: GlobalUnion) {\n  let type: { type: GraphQLScalarType | GraphQLList<GraphQLType> };\n  /* Basic */\n  if (ck === 'string' || ck === 'String') {\n    type = { type: GraphQLString };\n  }\n\n  if (ck === 'boolean' || ck === 'Boolean' || ck === 'Bool') {\n    type = { type: GraphQLBoolean };\n  }\n\n  if (ck === 'number' || ck === 'Number' || ck === 'Int') {\n    type = { type: GraphQLInt };\n  }\n\n  /* False negative */\n  if (ck === 'string!' || ck === 'String!') {\n    type = { type: new GraphQLNonNull(GraphQLString) };\n  }\n\n  if (ck === 'boolean!' || ck === 'Boolean!') {\n    type = { type: new GraphQLNonNull(GraphQLBoolean) };\n  }\n\n  if (ck === 'number!' || ck === 'Number!' || ck === 'Int') {\n    type = { type: new GraphQLNonNull(GraphQLInt) };\n  }\n\n  /* Array */\n  if (ck === 'string[]' || ck === 'String[]' || ck === '[String]') {\n    type = { type: new GraphQLList(GraphQLString) };\n  }\n\n  if (\n    ck === 'boolean[]' ||\n    ck === 'Boolean[]' ||\n    ck === '[Boolean]' ||\n    ck === '[Bool]'\n  ) {\n    type = { type: new GraphQLList(GraphQLBoolean) };\n  }\n\n  if (\n    ck === 'number[]' ||\n    ck === 'Number[]' ||\n    ck === '[Number]' ||\n    ck === '[Int]'\n  ) {\n    type = { type: new GraphQLList(GraphQLInt) };\n  }\n\n  /* False negative Array */\n  if (ck === 'string[]!' || ck === 'String[]!' || ck === '[String]!') {\n    type = {\n      type: new GraphQLNonNull(new GraphQLList(GraphQLString))\n    };\n  }\n\n  if (\n    ck === 'boolean[]!' ||\n    ck === 'Boolean[]!' ||\n    ck === '[Boolean]!' ||\n    ck === '[Bool]'\n  ) {\n    type = {\n      type: new GraphQLNonNull(new GraphQLList(GraphQLBoolean))\n    };\n  }\n\n  if (\n    ck === 'number[]!' ||\n    ck === 'Number[]!' ||\n    ck === '[Number]!' ||\n    ck === '[Int]!'\n  ) {\n    type = {\n      type: new GraphQLNonNull(new GraphQLList(GraphQLInt))\n    };\n  }\n  return type;\n}\n","import { GraphQLInputObjectType, GraphQLNonNull } from 'graphql';\nimport { Container } from '@rxdi/core';\nimport { ParseArgs } from './parse-ast';\nimport { Config, TypesToken } from '../app/app.tokens';\n\nconst InputObjectTypes = new Map<string, GraphQLInputObjectType>();\n\nexport const buildArgumentsSchema = (config: Config, resolver: string) => {\n  let args = config.$resolvers[resolver].args || {};\n  let fields = {};\n  const Arguments = Container.get(TypesToken);\n  Object.keys(args).forEach(a => {\n    const name = args[a].replace('!', '');\n    if (Arguments.has(name)) {\n      let reusableType = new GraphQLInputObjectType({\n        name,\n        fields: () => Arguments.get(name)\n      });\n      if (InputObjectTypes.has(name)) {\n        reusableType = InputObjectTypes.get(name);\n      }\n      InputObjectTypes.set(name, reusableType);\n      if (args[a].includes('!')) {\n        fields = {\n          payload: {\n            type: new GraphQLNonNull(reusableType)\n          }\n        };\n      } else {\n        fields = {\n          payload: {\n            type: reusableType\n          }\n        };\n      }\n      return;\n    }\n    fields[a] = ParseArgs(args[a]);\n  });\n  return fields;\n};\n","import {\n  GraphQLString,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLScalarType,\n  GraphQLType\n} from 'graphql';\nimport { GlobalUnion } from '../app/app.tokens';\nimport { Container, InjectionToken } from '@rxdi/core';\nimport { of, isObservable } from 'rxjs';\n\nexport function ParseTypesSchema(\n  ck: GlobalUnion,\n  key: string,\n  interceptors: InjectionToken<(...args: any[]) => any>[]\n) {\n  let type: { type: GraphQLScalarType | GraphQLList<GraphQLType> };\n  if (ck === 'string' || ck === 'String') {\n    type = { type: GraphQLString };\n  }\n\n  if (ck === 'boolean' || ck === 'Boolean') {\n    type = { type: GraphQLString };\n  }\n\n  if (ck === 'number' || ck === 'Number') {\n    type = { type: GraphQLInt };\n  }\n\n  if (ck === 'string[]' || ck === 'String[]' || ck === '[String]') {\n    type = { type: new GraphQLList(GraphQLString) };\n  }\n\n  if (ck === 'boolean[]' || ck === 'Boolean[]' || ck === '[Boolean]') {\n    type = { type: new GraphQLList(GraphQLString) };\n  }\n\n  if (ck === 'number[]' || ck === 'Number[]' || ck === '[Number]') {\n    type = { type: new GraphQLList(GraphQLInt) };\n  }\n  if (!type) {\n    throw new Error(`Wrong plugged type ${ck}`)\n  }\n\n  type['resolve'] = async function(...args) {\n    let defaultValue = args[0][key];\n    for (const interceptor of interceptors) {\n      defaultValue = await Container.get(interceptor)(\n        of(defaultValue),\n        args[0],\n        args[1],\n        args[2],\n        args[3]\n      );\n      if (isObservable(defaultValue)) {\n        defaultValue = await defaultValue.toPromise();\n      }\n    }\n    return defaultValue;\n  };\n  return type;\n}\n","export function isFunction<T>(object: T) {\n  return typeof object === 'function';\n}\n","import { GraphQLObjectType } from 'graphql';\nimport {\n  BootstrapService,\n  Container,\n  InjectionToken,\n  createUniqueHash\n} from '@gapi/core';\nimport {\n  TypesToken,\n  Config,\n  Roots,\n  GlobalUnion,\n  Externals,\n  ResolverDependencies\n} from '../app/app.tokens';\nimport { ParseArgs } from './parse-ast';\nimport { buildArgumentsSchema } from './parse-args-schema';\nimport { ParseTypesSchema } from './parse-types.schema';\nimport { isFunction } from './isFunction';\n\nfunction getInjectorSymbols(symbols: Externals[] = [], directives: string[]) {\n  return symbols\n    .map(symbol => {\n      const [isPresent] = directives.filter(d => d.includes(symbol.map));\n      if (isPresent) {\n        const injector = isPresent.replace(/[^\\w\\s]/gi, '').replace(/ +?/g, '');\n        const method = symbol.module[injector];\n        if (!method) {\n          throw new Error(`Missing method ${injector} inside ${symbol.file}`);\n        }\n        return {\n          symbol: symbol.map,\n          token: new InjectionToken(createUniqueHash(`${method}`)),\n          module: symbol.module,\n          method,\n          injector\n        };\n      }\n    })\n    .filter(i => !!i);\n}\n\nfunction findInterceptor(\n  symbol: string,\n  method: string,\n  externals: Externals[]\n) {\n  const usedExternalModule = externals.find(s => s.map === symbol);\n  if (!usedExternalModule.module[method]) {\n    throw new Error(\n      `Missing method ${method} inside ${usedExternalModule.file}`\n    );\n  }\n  return usedExternalModule.module[method];\n}\n\nfunction getSymbolInjectionToken(\n  symbol: string,\n  method: string,\n  externals: Externals[]\n) {\n  const interceptor = findInterceptor(symbol, method, externals);\n  return {\n    token: new InjectionToken(createUniqueHash(`${interceptor}`)),\n    interceptor\n  };\n}\n\nfunction setPart(externals: Externals[], resolver, symbolMap) {\n  const isCurlyPresent = resolver.includes('{');\n  let leftBracket = '(';\n  let rightBracket = ')';\n\n  if (isCurlyPresent) {\n    leftBracket = '{';\n    rightBracket = '}';\n  }\n\n  const directive = resolver.split(leftBracket);\n  let decorator: string[];\n\n  if (resolver.includes('@')) {\n    decorator = directive[1].replace(rightBracket, '').split('@');\n  } else {\n    const parts = directive[1].replace(rightBracket, '').split(symbolMap);\n    for (var i = parts.length; i-- > 1; ) {\n      parts.splice(i, 0, symbolMap);\n    }\n    decorator = parts;\n  }\n  decorator = decorator.filter(i => !!i);\n\n  const symbol = decorator[0];\n  const methodToExecute = decorator[1].replace(/ +?/g, '');\n\n  const { token, interceptor } = getSymbolInjectionToken(\n    symbol,\n    methodToExecute,\n    externals\n  );\n  return {\n    token,\n    interceptor\n  };\n}\nexport async function MakeAdvancedSchema(\n  config: Config,\n  bootstrap: BootstrapService\n) {\n  const types = {};\n  const Arguments = Container.get(TypesToken);\n  config.$args = config.$args || {};\n  Object.keys(config.$args).forEach(reusableArgumentKey => {\n    const args = {};\n    Object.keys(config.$args[reusableArgumentKey]).forEach(o => {\n      args[o] = ParseArgs(config.$args[reusableArgumentKey][o]);\n      Arguments.set(reusableArgumentKey, args);\n    });\n  });\n  Object.keys(config.$types).forEach(type => {\n    if (types[type]) {\n      return;\n    }\n    const currentType = config.$types[type];\n    Object.keys(currentType).forEach(key => {\n      types[type] = types[type] || {};\n\n      let resolver = currentType[key];\n      const interceptors = [];\n\n      if (config.$externals) {\n        const [symbol] = config.$externals\n          .map(e => e.map)\n          .filter(s => resolver.includes(s));\n        if (symbol) {\n          const hasMultipleSymbols = [\n            ...new Set(\n              resolver.split('=>').map(r => r.replace(/ +?/g, '').trim())\n            )\n          ];\n          if (hasMultipleSymbols.length > 2) {\n            const directives = hasMultipleSymbols.slice(\n              1,\n              hasMultipleSymbols.length\n            );\n            for (const injectorSymbol of getInjectorSymbols(\n              config.$externals,\n              directives\n            )) {\n              Container.set(injectorSymbol.token, injectorSymbol.method);\n              interceptors.push(injectorSymbol.token);\n            }\n          } else {\n            const { token, interceptor } = setPart(\n              config.$externals,\n              resolver,\n              symbol\n            );\n            Container.set(token, interceptor);\n            interceptors.push(token);\n          }\n          resolver = Object.keys(Roots)\n            .map(node => {\n              const types = Object.keys(Roots[node]).filter(key =>\n                resolver.includes(key)\n              );\n              if (types.length) {\n                return types[0];\n              }\n            })\n            .filter(i => !!i)[0] as GlobalUnion;\n        }\n      }\n      types[type][key] = ParseTypesSchema(resolver, key, interceptors);\n    });\n    types[type] = new GraphQLObjectType({\n      name: type,\n      fields: types[type]\n    });\n  });\n\n  Object.keys(config.$resolvers).forEach(resolver => {\n    const type = config.$resolvers[resolver].type;\n    let deps = config.$resolvers[resolver].deps || [];\n\n    const mapDependencies = (\n      dependencies: ResolverDependencies[]\n    ): { [key: string]: ResolverDependencies } =>\n      dependencies\n        .map(({ provide, map }) => ({\n          container: Container.get(provide),\n          provide,\n          map\n        }))\n        .reduce((acc, curr) => ({ ...acc, [curr.map]: curr.container }), {});\n\n    if (!types[type]) {\n      throw new Error(\n        `Missing type '${type}', Available types: '${Object.keys(\n          types\n        ).toString()}'`\n      );\n    }\n    let resolve = config.$resolvers[resolver].resolve;\n    if (!isFunction(resolve) && !Array.isArray(resolve)) {\n      /* Take the first method inside file for resolver */\n      let firstKey: string;\n      for (var key in resolve) {\n        firstKey = key;\n        break;\n      }\n      if (!resolve[firstKey]) {\n        throw new Error(\n          `Missing resolver for ${JSON.stringify(config.$resolvers[resolver])}`\n        );\n      }\n      if (isFunction(resolve[firstKey])) {\n        resolve = resolve[firstKey];\n      }\n    }\n\n    resolve = isFunction(resolve) ? resolve : () => resolve;\n\n    bootstrap.Fields.query[resolver] = {\n      type: types[type],\n      method_name: resolver,\n      args: buildArgumentsSchema(config, resolver),\n      public: true,\n      method_type: 'query',\n      target: mapDependencies(deps),\n      resolve\n    } as any;\n  });\n}\n","import {\n  GraphQLString,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLObjectType,\n  GraphQLBoolean\n} from 'graphql';\nimport { BootstrapService } from '@gapi/core';\n\nexport function MakeBasicSchema(config, bootstrap: BootstrapService) {\n  Object.keys(config.$resolvers).forEach(method_name => {\n    const resolve = config.$resolvers[method_name];\n    const fields = {};\n    const args = {};\n\n    Object.keys(resolve).forEach(key => {\n      const resolver = resolve[key];\n      if (typeof resolver === 'string') {\n        fields[key] = { type: GraphQLString };\n      }\n\n      if (typeof resolver === 'number') {\n        fields[key] = { type: GraphQLInt };\n      }\n      if (typeof resolver === 'boolean') {\n        fields[key] = { type: GraphQLBoolean };\n      }\n      if (typeof resolver !== 'string' && resolver.length) {\n        if (typeof resolver[0] === 'string') {\n          fields[key] = { type: new GraphQLList(GraphQLString) };\n        }\n\n        if (typeof resolver[0] === 'number') {\n          fields[key] = { type: new GraphQLList(GraphQLInt) };\n        }\n        if (typeof resolver[0] === 'boolean') {\n          fields[key] = { type: new GraphQLList(GraphQLBoolean) };\n        }\n      }\n    });\n    bootstrap.Fields.query[method_name] = {\n      type: new GraphQLObjectType({\n        name: `${method_name}_type`,\n        fields: () => fields\n      }),\n      args,\n      method_name,\n      public: true,\n      method_type: 'query',\n      target: () => {},\n      resolve: typeof resolve === 'function' ? resolve : () => resolve\n    } as any;\n  });\n}\n","export const transpilerCache: Map<string, any> = new Map();\n","import { TranspileTypescript } from './typescript.builder';\nimport { join, parse, isAbsolute } from 'path';\nimport { Externals } from '../app/app.tokens';\nimport { transpilerCache } from './transpiler-cache';\n\nexport async function TranspileAndLoad(path: string, outDir: string) {\n  path = convertToRelative(path);\n  if (transpilerCache.has(path)) {\n    return transpilerCache.get(path);\n  }\n  await TranspileTypescript([path], outDir);\n  const file = require(getTranspiledFilePath(path, outDir));\n  transpilerCache.set(path, file);\n  return file;\n}\n\nfunction getTranspiledFilePath(path: string, outDir: string) {\n  return join(\n    process.cwd(),\n    outDir,\n    parse(join(process.cwd(), outDir, path)).base.replace('ts', 'js')\n  );\n}\n\nfunction convertToRelative(path: string) {\n  path = path[0] === '.' ? path.substr(1) : path;\n  return isAbsolute(path) ? (path = path.replace(process.cwd(), '')) : path;\n}\n\nexport async function TranspileAndGetAll(\n  externals: Externals[],\n  outDir: string\n) {\n  await TranspileTypescript(\n    externals\n      .map(external => external.file)\n      .map(path => convertToRelative(path)),\n    outDir\n  );\n  return externals.map(path => ({\n    ...path,\n    transpiledFile: join(\n      process.cwd(),\n      outDir,\n      parse(path.file).base.replace('ts', 'js')\n    )\n  }));\n}\n","export function isArray<T>(o: T) {\n  return Object.prototype.toString.call(o) === '[object Array]';\n}\n","import { traverseAndLoadConfigs } from './traverse';\n\nexport async function traverseArray<T>(arr: T) {\n  for (const x of arr as any) {\n    await traverseAndLoadConfigs(x);\n  }\n}\n","import { parse } from 'path';\n\nexport function isInValidPath(path: string, options = {} as any) {\n  if (path === '' || typeof path !== 'string') return true;\n\n  // https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx#maxpath\n  const MAX_PATH = options.extended ? 32767 : 260;\n  if (typeof path !== 'string' || path.length > MAX_PATH - 12) {\n    return true;\n  }\n\n  const rootPath = parse(path).root;\n  if (rootPath) path = path.slice(rootPath.length);\n\n  // https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx#Naming_Conventions\n  if (options.file) {\n    return /[<>:\"/\\\\|?*]/.test(path);\n  }\n  return /[<>:\"|?*]/.test(path);\n}\n","export const traverseMap: { parent: string; path: string }[] = [];\n","import { promisify } from 'util';\nimport { TranspileAndLoad } from './transpile-and-load';\nimport { exists, readFile } from 'fs';\nimport { load } from 'js-yaml';\nimport { isInValidPath } from './is-invalid-path';\nimport { traverseMap } from './traverse-map';\nimport { join } from 'path';\n\nexport async function loadFile(path: string) {\n  let loadedModule: any;\n  if (isInValidPath(path)) {\n    return path;\n  }\n  if (!(await promisify(exists)(path))) {\n    const lastElement = traverseMap[traverseMap.length - 1];\n    if (lastElement) {\n      path = join(\n        process.cwd(),\n        lastElement.parent,\n        path.replace(process.cwd(), '')\n      );\n    }\n  }\n\n  if (path.includes('.ts')) {\n    loadedModule = await TranspileAndLoad(path, './.gj/out');\n  } else if (path.includes('.yml')) {\n    loadedModule = load(await promisify(readFile)(path, { encoding: 'utf-8' }));\n  } else if (path.includes('.json')) {\n    loadedModule = require(path);\n  } else if (path.includes('.html')) {\n    loadedModule = await promisify(readFile)(path, { encoding: 'utf-8' });\n  } else {\n    loadedModule = require('esm')(module)(path);\n  }\n\n  const parent = path\n    .substring(0, path.lastIndexOf('/'))\n    .replace(process.cwd(), '');\n\n  traverseMap.push({ parent, path });\n  return loadedModule;\n}\n","import { traverseAndLoadConfigs } from './traverse';\nimport { loadFile } from '../load-file';\nimport { join } from 'path';\nexport async function traverseObject<T>(obj: T) {\n  for (let [k, v] of Object.entries(obj)) {\n    if (obj.hasOwnProperty(k)) {\n      if (typeof obj[k] === 'string' && obj[k].includes('💉')) {\n        obj[k] = await loadFile(join(process.cwd(), obj[k].replace('💉', '')));\n      }\n      await traverseAndLoadConfigs(obj[k]);\n    }\n  }\n}\n","import { isArray } from '../is-array';\nimport { traverseArray } from './traverse-array';\nimport { traverseObject } from './traverse-object';\n\nexport async function traverseAndLoadConfigs<T>(x: T) {\n  if (isArray(x)) {\n    await traverseArray(x);\n  } else if (typeof x === 'object' && x !== null) {\n    await traverseObject(x);\n  }\n}\n","import { watch } from 'chokidar';\nimport { loadFile } from './load-file';\nimport { Stats } from 'fs';\nimport { Config } from '../app/app.tokens';\nimport { traverseAndLoadConfigs } from './traverse/traverse';\nimport { BootstrapService } from '@gapi/core';\n\nexport function watchBundles(paths: string[], config: Config, bootstrap: BootstrapService) {\n  const ignored = (p: string) => p.includes('node_modules');\n  watch([...new Set(paths)], { ignored }).on('change', async (path, stats: Stats) => {\n    const test = await loadFile(path)\n    console.log(test)\n    await traverseAndLoadConfigs(config);\n    bootstrap.Fields.query['findUser'].resolve = function () {\n\n    }\n  });\n}\n","import {\n  Module,\n  SCHEMA_OVERRIDE,\n  BootstrapService,\n  GraphQLSchema,\n  printSchema,\n  buildSchema,\n  mergeSchemas,\n  Container,\n  GRAPHQL_PLUGIN_CONFIG,\n  GraphQLDirective\n} from '@gapi/core';\nimport { writeFile, readFileSync, exists, readFile } from 'fs';\nimport { promisify } from 'util';\nimport { includes, nextOrDefault } from '../helpers/args-extractors';\nimport { VoyagerModule } from '@gapi/voyager';\nimport { getConfig } from '../helpers/set-config';\nimport { basicTemplate } from '../helpers/basic.template';\nimport { MakeAdvancedSchema } from '../helpers/advanced-schema';\nimport { MakeBasicSchema } from '../helpers/basic-schema';\nimport { join } from 'path';\nimport {\n  TypesToken,\n  ResolversToken,\n  ArgumentsToken,\n  Config,\n  GuardsToken\n} from './app.tokens';\nimport {\n  TranspileAndLoad,\n  TranspileAndGetAll\n} from '../helpers/transpile-and-load';\nimport { traverseAndLoadConfigs } from '../helpers/traverse/traverse';\nimport { traverseMap } from '../helpers/traverse-map';\nimport { watchBundles } from '../helpers/watch-bundles';\n\n@Module({\n  imports: [VoyagerModule.forRoot()],\n  providers: [\n    {\n      provide: TypesToken,\n      useValue: new Map()\n    },\n    {\n      provide: ResolversToken,\n      useValue: new Map()\n    },\n    {\n      provide: ArgumentsToken,\n      useValue: new Map()\n    },\n    {\n      provide: GuardsToken,\n      useValue: new Map()\n    },\n    {\n      provide: SCHEMA_OVERRIDE,\n      useFactory: () => (schema: GraphQLSchema) => {\n        let externalSchema;\n        try {\n          const config = JSON.parse(\n            readFileSync(join(process.cwd(), 'gj.json'), {\n              encoding: 'utf-8'\n            })\n          );\n          config.$schema = config.$schema || nextOrDefault('--schema', false);\n          if (config.$schema) {\n            externalSchema = readFileSync(config.$schema, {\n              encoding: 'utf-8'\n            });\n            externalSchema = buildSchema(externalSchema);\n          }\n        } catch (e) {}\n        const schemas = [externalSchema, schema].filter(i => !!i);\n        let mergedSchemas: GraphQLSchema;\n        if (schemas.length === 1) {\n          mergedSchemas = schema;\n        } else {\n          mergedSchemas = mergeSchemas({\n            schemas\n          });\n        }\n\n        if (includes('--verbose')) {\n          console.log(`\nSchema:\n${printSchema(mergedSchemas)}\n                  `);\n        }\n\n        if (process.argv.toString().includes('--generate')) {\n          promisify(writeFile)('./schema.graphql', printSchema(mergedSchemas), {\n            encoding: 'utf-8'\n          }).then(() => {\n            console.log('Schema created!');\n            process.exit(0);\n          });\n        } else {\n          console.log(\n            'You can extract this schema by running --generate command'\n          );\n        }\n        return mergedSchemas;\n      }\n    },\n    {\n      provide: Config,\n      useFactory: async () => {\n        let config = await getConfig(\n          nextOrDefault('--config', 'graphqj-config')\n        );\n        if (!config) {\n          config = await getConfig('gj');\n        }\n        if (!config) {\n          config = basicTemplate;\n        }\n        return config['default'] || config;\n      }\n    },\n    {\n      provide: 'Run',\n      deps: [\n        Config,\n        BootstrapService,\n        TypesToken,\n        ResolversToken,\n        ArgumentsToken,\n        GuardsToken,\n        GRAPHQL_PLUGIN_CONFIG\n      ],\n      lazy: true,\n      useFactory: async (\n        config: Config,\n        bootstrap: BootstrapService,\n        types: TypesToken,\n        resolvers: ResolversToken,\n        args: ArgumentsToken,\n        guards: GuardsToken,\n        graphqlConfig: GRAPHQL_PLUGIN_CONFIG\n      ) => {\n        config = await config;\n        await traverseAndLoadConfigs(config);\n\n        if (config.$externals) {\n          const compiledPaths = await TranspileAndGetAll(\n            config.$externals,\n            './.gj/out'\n          );\n          config.$externals = compiledPaths.map(external => {\n            if (external.file.includes('.ts')) {\n              external.module = require(external.transpiledFile);\n            } else {\n              const m = require('esm')(module)(\n                join(process.cwd(), external.file)\n              );\n              external.module = m['default'] || m;\n            }\n            Container.set(external.map, external.module);\n            return external;\n          });\n        }\n\n        let filePath = join(process.cwd(), config.$directives || '');\n        let directives: GraphQLDirective[] | any[];\n\n        if ((await promisify(exists)(filePath)) && filePath !== process.cwd()) {\n          if (filePath.includes('.ts')) {\n            directives = await TranspileAndLoad(\n              config.$directives.replace('.', ''),\n              './.gj/out'\n            );\n          } else {\n            directives = require('esm')(module)(filePath);\n          }\n          graphqlConfig.directives = (await Promise.all(\n            Object.keys(directives).map(d =>\n              typeof directives[d] === 'function' ? directives[d]() : null\n            )\n          )).filter(i => !!i);\n        }\n\n        if (config.$mode === 'basic') {\n          await MakeBasicSchema(config, bootstrap);\n        }\n        if (config.$mode === 'advanced') {\n          await MakeAdvancedSchema(config, bootstrap);\n        }\n        watchBundles(traverseMap.map(f => f.path), config, bootstrap)\n        return true;\n      }\n    }\n  ]\n})\nexport class AppModule {}\n","import { spawn, ChildProcessWithoutNullStreams } from 'child_process';\nimport { Observable } from 'rxjs';\n\nexport const SelfChild = (configFile: string) => {\n  return new Observable<ChildProcessWithoutNullStreams>(observer => {\n    const args = []\n    args.push('--config')\n    args.push(configFile)\n    const child = spawn('gj', args);\n    child.stdout.pipe(process.stdout);\n    child.stderr.pipe(process.stderr);\n    process.on('exit', () => child.kill());\n    observer.next(child);\n    return () => {\n      observer.complete();\n      child.kill();\n      console.log(`Child process: ${child.pid} killed`);\n    };\n  });\n};\n","import { BootstrapFramework } from '@rxdi/core';\nimport { AppModule } from './app/app.module';\nimport { CoreModule } from '@gapi/core';\nimport { nextOrDefault, includes } from './helpers/args-extractors';\nimport { writeFile, existsSync } from 'fs';\nimport { promisify } from 'util';\nimport { watch } from 'chokidar';\nimport { SelfChild } from './helpers/self-child';\nimport { Subscription } from 'rxjs';\n\nif (includes('--watch')) {\n  let subscription: Subscription;\n  const configPath = nextOrDefault('--config');\n  if (!existsSync(configPath)) {\n    throw new Error(`File missing ${configPath}`);\n  }\n  const ignored = (p: string) => p.includes('node_modules');\n\n  watch(configPath, { ignored }).on('change', async (event, path) => {\n    if (subscription) {\n      subscription.unsubscribe();\n    }\n    subscription = SelfChild(configPath).subscribe(process => {\n      console.log('Child process started: ', process.pid);\n    });\n  });\n\n  watch(configPath, { ignored }).on('ready', async (event, path) => {\n    if (subscription) {\n      subscription.unsubscribe();\n    }\n    subscription = SelfChild(configPath).subscribe(process => {\n      console.log('Child process started: ', process.pid);\n    });\n  });\n} else if (includes('init')) {\n  if (includes('advanced')) {\n    promisify(writeFile)(\n      './gj.json',\n      `\n{\n  \"$mode\": \"advanced\",\n  \"$types\": {\n    \"user\": {\n      \"name\": \"String\",\n      \"email\": \"String\",\n      \"phone\": \"Number\",\n      \"arrayOfNumbers\": \"Number[]\",\n      \"arrayOfStrings\": \"String[]\"\n    }\n  },\n  \"$resolvers\": {\n    \"findUser\": {\n      \"type\": \"user\",\n      \"resolve\": {\n        \"name\": \"Kristiyan Tachev\",\n        \"email\": \"test@gmail.com\",\n        \"phone\": 414141,\n        \"arrayOfNumbers\": [515151, 412414],\n        \"arrayOfStrings\": [\"515151\", \"412414\"]\n      }\n    }\n  }\n}`,\n      { encoding: 'utf-8' }\n    );\n  } else if (includes('es6')) {\n    promisify(writeFile)(\n      './gj.js',\n      `\nexport default {\n  $mode: 'advanced',\n  $types: {\n    user: {\n      name: 'String',\n      email: 'String',\n      phone: 'Number',\n      arrayOfNumbers: 'Number[]',\n      arrayOfStrings: 'String[]'\n    }\n  },\n  $resolvers: {\n    findUser: {\n      type: 'user',\n      args: {\n        userId: \"String!\",\n        userId2: \"String\",\n      },\n      resolve: async (root, payload, context) => ({\n        name: 'Kristiyan Tachev',\n        email: 'test@gmail.com',\n        phone: 4141423,\n        arrayOfNumbers: [515151, 412414],\n        arrayOfStrings: ['515151', '412414']\n      })\n    }\n  }\n};\n`,\n      { encoding: 'utf-8' }\n    );\n  } else if (includes('typescript')) {\n    promisify(writeFile)(\n      './gj.ts',\n      `\nexport default {\n  $mode: 'advanced',\n  $types: {\n    user: {\n      name: 'String',\n      email: 'String',\n      phone: 'Number',\n      arrayOfNumbers: 'Number[]',\n      arrayOfStrings: 'String[]'\n    }\n  },\n  $resolvers: {\n    findUser: {\n      type: 'user',\n      args: {\n        userId: \"String!\",\n        userId2: \"String\",\n      },\n      resolve: async (root, payload: { userId: string; userId2?: string }) => ({\n        name: 'Kristiyan Tachev',\n        email: 'test@gmail.com',\n        phone: 4141423,\n        arrayOfNumbers: [515151, 412414],\n        arrayOfStrings: ['515151', '412414']\n      })\n    }\n  }\n};\n`,\n      { encoding: 'utf-8' }\n    );\n  } else if (includes('yml')) {\n    promisify(writeFile)(\n      './gj.yml',\n      `\n$mode: advanced\n$types:\n  user:\n    name: String\n    email: String\n    phone: Number\n    arrayOfNumbers: Number[]\n    arrayOfStrings: String[]\n\n$resolvers:\n  findUser:\n    type: user\n    args:\n      userId: String\n    resolve:\n      name: Kristiyan Tachev\n      email: test@gmail.com\n      phone: 414141\n      arrayOfNumbers: \n        - 515151\n        - 412414\n      arrayOfStrings:\n        - '515151'\n        - '412414'\n\n  findUser2:\n    type: user\n    args:\n      userId: String!\n    resolve:\n      name: Kristiyan Tachev\n      email: test@gmail.com\n      phone: 414141\n      arrayOfNumbers: \n        - 515151\n        - 412414\n      arrayOfStrings:\n        - '515151'\n        - '412414'\n`,\n      { encoding: 'utf-8' }\n    );\n  } else {\n    promisify(writeFile)(\n      './gj.json',\n      `\n{\n  \"$mode\": \"basic\",\n  \"$resolvers\": {\n    \"findUser\": {\n      \"name\": \"Kristiyan Tachev\",\n      \"email\": \"test@gmail.com\",\n      \"phone\": 414141,\n      \"arrayOfNumbers\": [515151, 412414],\n      \"arrayOfStrings\": [\"515151\", \"412414\"]\n    }\n  }\n}\n`,\n      { encoding: 'utf-8' }\n    );\n  }\n} else {\n  BootstrapFramework(AppModule, [\n    CoreModule.forRoot({\n      graphql: {\n        openBrowser: nextOrDefault('--random', true, v =>\n          v === 'true' ? false : true\n        ),\n        buildAstDefinitions: false // Removed ast definition since directives are lost\n      },\n      server: {\n        randomPort: nextOrDefault('--random', false),\n        hapi: {\n          port: nextOrDefault('--port', 9000, p => Number(p))\n        }\n      }\n    })\n  ]).subscribe(() => console.log('Started'), console.log.bind(console));\n}\n"]}