{"version":3,"sources":["helpers/args-extractors.ts","helpers/typescript.builder.ts","helpers/set-config.ts","helpers/basic.template.ts","app/app.tokens.ts","helpers/parse-ast.ts","helpers/dynamic-schema/mutators/build-arguments.ts","helpers/lazy-types.ts","helpers/parse-types.schema.ts","helpers/dynamic-schema/mutators/build-types.ts","helpers/isFunction.ts","helpers/get-first-item.ts","helpers/parse-args-schema.ts","helpers/dynamic-schema/mutators/build-resolvers.ts","helpers/advanced-schema.ts","helpers/basic-schema.ts","app/app.module.ts","helpers/self-child.ts","main.ts"],"names":[],"mappings":"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","file":"main.js","sourceRoot":"../src","sourcesContent":["export const includes = i => process.argv.toString().includes(i);\nexport const nextOrDefault = (i, fb: any = true, type = p => p) => {\n  if (process.argv.toString().includes(i)) {\n    const isNextArgumentPresent = process.argv[process.argv.indexOf(i) + 1];\n    if (!isNextArgumentPresent) {\n      return fb;\n    }\n    if (isNextArgumentPresent.includes('--')) {\n      return fb;\n    }\n    return type(isNextArgumentPresent);\n  }\n  return fb;\n};\n","import { spawn } from 'child_process';\n\nexport const TranspileTypescript = (paths: string[], outDir: string) => {\n  return new Promise((resolve, reject) => {\n    const child = spawn('npx', [\n      'gapi',\n      'build',\n      '--glob',\n      `${paths.toString()}`,\n      '--outDir',\n      outDir\n    ]);\n    // child.stdout.pipe(process.stdout);\n    child.stderr.pipe(process.stderr);\n    child.on('close', (code: number) => resolve(code));\n  });\n};\n","import { promisify } from 'util';\nimport { exists, Stats, writeFile, stat, readFile, unlink, readFileSync } from 'fs';\nimport { TranspileTypescript } from './typescript.builder';\nimport { join } from 'path';\nimport { load } from 'js-yaml';\n\nexport async function getConfig(configFilename: string) {\n  let config;\n  try {\n    config = require('esm')(module)(\n      join(process.cwd(), `${configFilename}.js`)\n    );\n    // console.log('JS Config', config)\n  } catch (e) {}\n  if (await promisify(exists)(`./${configFilename}.yml`)) {\n    const file = readFileSync(`./${configFilename}.yml`, {encoding: 'utf-8'})\n    config = load(file);\n    // console.log('YML Config', config)\n  }\n  if (await promisify(exists)(`./${configFilename}.ts`)) {\n    // console.log('Typescript Config', config)\n    const isMigrateTempConfigExists = await promisify(exists)(\n      './.gj/config.temp'\n    );\n    const TranspileAndWriteTemp = async (stats: Stats) => {\n      await TranspileTypescript([`/${configFilename}.ts`], './.gj');\n      // console.log('Transpile complete!');\n      await promisify(writeFile)(\n        './.gj/config.temp',\n        stats.mtime.toISOString(),\n        { encoding: 'utf-8' }\n      );\n    };\n    const stats = await promisify(stat)(`./${configFilename}.ts`);\n    if (isMigrateTempConfigExists) {\n      const temp = await promisify(readFile)('./.gj/config.temp', {\n        encoding: 'utf-8'\n      });\n      if (new Date(temp).toISOString() !== stats.mtime.toISOString()) {\n        // console.log(`${configFilename} configuration is new transpiling...`);\n        await TranspileAndWriteTemp(stats);\n      }\n    } else {\n      // console.log(`Transpile ${configFilename}.ts...`);\n      await TranspileAndWriteTemp(stats);\n    }\n    config = require(join(process.cwd(), `./.gj`, `${configFilename}.js`));\n\n    try {\n      await promisify(unlink)(join('./.gj', `${configFilename}.js.map`));\n    } catch (e) {}\n  }\n  try {\n    config = JSON.parse(\n      await promisify(readFile)(join(process.cwd(), `${configFilename}.json`), {\n        encoding: 'utf-8'\n      })\n    );\n    // console.log('Json Config', config)\n  } catch (e) {}\n\n  return config;\n}\n","export const basicTemplate = {\n  $mode: 'basic',\n  $types: {\n    user: {\n      pesho: 'string'\n    }\n  },\n  $schema: './schema.graphql',\n  $resolvers: {\n    findUser: {\n      gosho: 'omg',\n      pesho: 515151,\n      pesho2: 515151,\n      pesho3: 515151,\n      dadadada: 515151,\n      pesho4: 515151,\n      pesho5: [515151],\n      pesho6: ['515151']\n    },\n    findUser2: {\n      gosho: 'omg',\n      pesho: 22,\n      pesho2: 515151,\n      pesho3: 515151,\n      pesho4: 515151,\n      pesho5: 515151\n    }\n  }\n};\n","import { InjectionToken } from '@rxdi/core';\nimport { GraphQLInputFieldConfigMap } from 'graphql';\n\nfunction strEnum<T extends string>(o: Array<T>): { [K in T]: K } {\n  return o.reduce((res, key) => {\n    res[key] = key;\n    return res;\n  }, Object.create(null));\n}\n\nexport const BooleanUnion = strEnum([\n  'Boolean',\n  'Bool',\n  'boolean',\n  'Boolean[]',\n  'boolean[]',\n  '[Boolean]',\n  '[Bool]',\n  'boolean!',\n  'Boolean!',\n  '[Boolean]!',\n  'boolean[]!',\n  'Boolean[]!'\n]);\n\nexport const StringUnion = strEnum([\n  'String',\n  'string',\n  'String[]',\n  'string[]',\n  '[String]',\n  'string!',\n  'String!',\n  'String[]!',\n  'string[]!',\n  '[String]!'\n]);\n\nexport const IntegerUnion = strEnum([\n  'Int',\n  'integer',\n  'number',\n  'Number',\n  'Num',\n  'int',\n  'Number[]',\n  'number[]',\n  '[Number]',\n  'number!',\n  '[Int]',\n  'Number!',\n  'number[]!',\n  'Number[]!',\n  '[Number]!',\n  '[Int]!'\n]);\n\nexport type BooleanUnion = keyof typeof BooleanUnion;\nexport type StringUnion = keyof typeof StringUnion;\nexport type IntegerUnion = keyof typeof IntegerUnion;\nexport type GlobalUnion = BooleanUnion | StringUnion | IntegerUnion;\n\nexport const Roots = {\n  booleanNode: BooleanUnion,\n  stringNode: StringUnion,\n  numberNode: IntegerUnion\n};\n\nexport type Args = { [key: string]: GlobalUnion };\nexport type Externals = {\n  map: string;\n  file: string;\n  module?: any;\n  transpiledFile?: string;\n};\n\nexport interface ResolverDependencies {\n  provide: string;\n  map: string;\n  container: any;\n}\n\nexport interface Resolver {\n  [key: string]: {\n    type: string;\n    args: Args;\n    resolve: any;\n    method: 'Query' | 'Mutation' | 'Subscription' | 'query' | 'mutation' | 'subscription'\n    deps?: ResolverDependencies[];\n  };\n}\nexport interface Config {\n  $mode: 'basic' | 'advanced';\n  $types: { [key: string]: Args };\n  $resolvers: Resolver;\n  $directives: string;\n  $externals: Externals[];\n  $args: any;\n  $views?: { [key: string]: { query: string; payload: any; html: string } };\n  _meta: {[key: string]: string}; // Folder mapping for every module\n}\n\nexport const TypesToken = new InjectionToken<\n  Map<string, GraphQLInputFieldConfigMap>\n>('(@rxdi/graphqj): types-token');\nexport const ArgumentsToken = new InjectionToken<Map<string, Args>>(\n  '(@rxdi/graphqj): arguments-token'\n);\nexport const ResolversToken = new InjectionToken<Map<string, Args>>(\n  '(@rxdi/graphqj): resolvers-token'\n);\nexport const GuardsToken = new InjectionToken<Map<string, Args>>(\n  '(@rxdi/graphqj): resolvers-token'\n);\nexport const IsBundlerInstalled = new InjectionToken<{parcel: boolean; gapi: boolean;}>(\n  '(@rxdi/graphqj): is-bundler-installed'\n);\nexport const Config = new InjectionToken<Map<string, Args>>();\n\nexport type TypesToken = Map<string, Args>;\nexport type ArgumentsToken = Map<string, Args>;\nexport type ResolversToken = Map<string, Args>;\nexport type GuardsToken = Map<string, Args>;\nexport type IsBundlerInstalled = {parcel: boolean; gapi: boolean;};\n","import {\n  GraphQLString,\n  GraphQLBoolean,\n  GraphQLInt,\n  GraphQLNonNull,\n  GraphQLList,\n  GraphQLScalarType,\n  GraphQLType\n} from 'graphql';\nimport { GlobalUnion } from '../app/app.tokens';\n\nexport function ParseArgs(ck: GlobalUnion) {\n  let type: { type: GraphQLScalarType | GraphQLList<GraphQLType> };\n  /* Basic */\n  if (ck === 'string' || ck === 'String') {\n    type = { type: GraphQLString };\n  }\n\n  if (ck === 'boolean' || ck === 'Boolean' || ck === 'Bool') {\n    type = { type: GraphQLBoolean };\n  }\n\n  if (ck === 'number' || ck === 'Number' || ck === 'Int') {\n    type = { type: GraphQLInt };\n  }\n\n  /* False negative */\n  if (ck === 'string!' || ck === 'String!') {\n    type = { type: new GraphQLNonNull(GraphQLString) };\n  }\n\n  if (ck === 'boolean!' || ck === 'Boolean!') {\n    type = { type: new GraphQLNonNull(GraphQLBoolean) };\n  }\n\n  if (ck === 'number!' || ck === 'Number!' || ck === 'Int') {\n    type = { type: new GraphQLNonNull(GraphQLInt) };\n  }\n\n  /* Array */\n  if (ck === 'string[]' || ck === 'String[]' || ck === '[String]') {\n    type = { type: new GraphQLList(GraphQLString) };\n  }\n\n  if (\n    ck === 'boolean[]' ||\n    ck === 'Boolean[]' ||\n    ck === '[Boolean]' ||\n    ck === '[Bool]'\n  ) {\n    type = { type: new GraphQLList(GraphQLBoolean) };\n  }\n\n  if (\n    ck === 'number[]' ||\n    ck === 'Number[]' ||\n    ck === '[Number]' ||\n    ck === '[Int]'\n  ) {\n    type = { type: new GraphQLList(GraphQLInt) };\n  }\n\n  /* False negative Array */\n  if (ck === 'string[]!' || ck === 'String[]!' || ck === '[String]!') {\n    type = {\n      type: new GraphQLNonNull(new GraphQLList(GraphQLString))\n    };\n  }\n\n  if (\n    ck === 'boolean[]!' ||\n    ck === 'Boolean[]!' ||\n    ck === '[Boolean]!' ||\n    ck === '[Bool]'\n  ) {\n    type = {\n      type: new GraphQLNonNull(new GraphQLList(GraphQLBoolean))\n    };\n  }\n\n  if (\n    ck === 'number[]!' ||\n    ck === 'Number[]!' ||\n    ck === '[Number]!' ||\n    ck === '[Int]!'\n  ) {\n    type = {\n      type: new GraphQLNonNull(new GraphQLList(GraphQLInt))\n    };\n  }\n  return type;\n}\n","import { Config, TypesToken } from '../../../app/app.tokens';\nimport { ParseArgs } from '../../parse-ast';\nimport { Container } from '@rxdi/core';\n\nexport function buildArguments(config: Config) {\n  Object.keys(config.$args).forEach(reusableArgumentKey => {\n    const args = {};\n    Object.keys(config.$args[reusableArgumentKey]).forEach(o => {\n      args[o] = ParseArgs(config.$args[reusableArgumentKey][o]);\n      Container.get(TypesToken).set(reusableArgumentKey, args);\n    });\n  });\n}\n","export const lazyTypes = new Map()","import {\n  GraphQLString,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLScalarType,\n  GraphQLType\n} from 'graphql';\nimport { GlobalUnion } from '../app/app.tokens';\nimport { Container, InjectionToken } from '@rxdi/core';\nimport { of, isObservable } from 'rxjs';\nimport { lazyTypes } from './lazy-types';\n\nexport function ParseTypesSchema(\n  ck: GlobalUnion,\n  key: string,\n  parentType: string,\n  interceptors: InjectionToken<(...args: any[]) => any>[],\n  types: { [key: string]: any }\n) {\n  let type: { type: GraphQLScalarType | GraphQLList<GraphQLType> };\n  if (ck === 'string' || ck === 'String') {\n    type = { type: GraphQLString };\n  }\n\n  if (ck === 'boolean' || ck === 'Boolean') {\n    type = { type: GraphQLString };\n  }\n\n  if (ck === 'number' || ck === 'Number') {\n    type = { type: GraphQLInt };\n  }\n\n  if (ck === 'string[]' || ck === 'String[]' || ck === '[String]') {\n    type = { type: new GraphQLList(GraphQLString) };\n  }\n\n  if (ck === 'boolean[]' || ck === 'Boolean[]' || ck === '[Boolean]') {\n    type = { type: new GraphQLList(GraphQLString) };\n  }\n\n  if (ck === 'number[]' || ck === 'Number[]' || ck === '[Number]') {\n    type = { type: new GraphQLList(GraphQLInt) };\n  }\n  const isRecursiveType = ck\n    .replace('(', '')\n    .replace(')', '')\n    .replace('!', '')\n    .replace('[', '')\n    .replace(']', '');\n  if (parentType === isRecursiveType) {\n    lazyTypes.set(parentType, {\n      ...lazyTypes.get(parentType),\n      [key]: isRecursiveType\n    });\n    type = { type: types[parentType] } as any; // хмм\n  }\n  if (!type) {\n    throw new Error(`Wrong plugged type ${ck}`);\n  }\n  type['resolve'] = async function(...args) {\n    let defaultValue = args[0][key];\n    for (const interceptor of interceptors) {\n      defaultValue = await Container.get(interceptor)(\n        of(defaultValue),\n        args[0],\n        args[1],\n        args[2],\n        args[3]\n      );\n      if (isObservable(defaultValue)) {\n        defaultValue = await defaultValue.toPromise();\n      }\n    }\n    return defaultValue;\n  };\n  return type;\n}\n","import {\n  Config,\n  TypesToken,\n  Roots,\n  GlobalUnion,\n  Externals,\n  Args\n} from '../../../app/app.tokens';\nimport { ParseTypesSchema } from '../../parse-types.schema';\nimport { Container, createUniqueHash, InjectionToken } from '@rxdi/core';\nimport { GraphQLObjectType, GraphQLSchema } from 'graphql';\n\nfunction setPart(externals: Externals[], resolver: string, symbolMap: string) {\n  const isCurlyPresent = resolver.includes('{');\n  let leftBracket = '(';\n  let rightBracket = ')';\n\n  if (isCurlyPresent) {\n    leftBracket = '{';\n    rightBracket = '}';\n  }\n\n  const directive = resolver.split(leftBracket);\n  let decorator: string[];\n\n  if (resolver.includes('@')) {\n    decorator = directive[1].replace(rightBracket, '').split('@');\n  } else {\n    const parts = directive[1].replace(rightBracket, '').split(symbolMap);\n    for (var i = parts.length; i-- > 1; ) {\n      parts.splice(i, 0, symbolMap);\n    }\n    decorator = parts;\n  }\n  decorator = decorator.filter(i => !!i);\n\n  const symbol = decorator[0];\n  const methodToExecute = decorator[1].replace(/ +?/g, '');\n\n  const { token, interceptor } = getSymbolInjectionToken(\n    symbol,\n    methodToExecute,\n    externals\n  );\n  return {\n    token,\n    interceptor\n  };\n}\n\nfunction getSymbolInjectionToken(\n  symbol: string,\n  method: string,\n  externals: Externals[]\n) {\n  const interceptor = findInterceptor(symbol, method, externals);\n  return {\n    token: new InjectionToken(createUniqueHash(`${interceptor}`)),\n    interceptor\n  };\n}\n\nfunction getInjectorSymbols(symbols: Externals[] = [], directives: string[]) {\n  return symbols\n    .map(symbol => {\n      const [isPresent] = directives.filter(d => d.includes(symbol.map));\n      if (isPresent) {\n        const injector = isPresent.replace(/[^\\w\\s]/gi, '').replace(/ +?/g, '');\n        const method = symbol.module[injector];\n        if (!method) {\n          throw new Error(`Missing method ${injector} inside ${symbol.file}`);\n        }\n        return {\n          symbol: symbol.map,\n          token: new InjectionToken(createUniqueHash(`${method}`)),\n          module: symbol.module,\n          method,\n          injector\n        };\n      }\n    })\n    .filter(i => !!i);\n}\n\nfunction findInterceptor(\n  symbol: string,\n  method: string,\n  externals: Externals[]\n) {\n  const usedExternalModule = externals.find(s => s.map === symbol);\n  if (!usedExternalModule.module[method]) {\n    throw new Error(\n      `Missing method ${method} inside ${usedExternalModule.file}`\n    );\n  }\n  return usedExternalModule.module[method];\n}\n\nexport function buildTypes(\n  config: Config,\n  types,\n  buildedSchema: GraphQLSchema\n) {\n  Object.keys(config.$types).forEach(type => {\n    if (types[type]) {\n      return;\n    }\n    const currentType = config.$types[type];\n    Object.keys(currentType).forEach(key => {\n      types[type] = types[type] || {};\n\n      let resolver = currentType[key];\n      const interceptors = [];\n\n      if (config.$externals) {\n        const [symbol] = config.$externals\n          .map(e => e.map)\n          .filter(s => resolver.includes(s));\n        if (symbol) {\n          const hasMultipleSymbols = [\n            ...new Set(\n              resolver.split('=>').map(r => r.replace(/ +?/g, '').trim())\n            )\n          ];\n          if (hasMultipleSymbols.length > 2) {\n            const directives = hasMultipleSymbols.slice(\n              1,\n              hasMultipleSymbols.length\n            );\n            for (const injectorSymbol of getInjectorSymbols(\n              config.$externals,\n              directives\n            )) {\n              Container.set(injectorSymbol.token, injectorSymbol.method);\n              interceptors.push(injectorSymbol.token);\n            }\n          } else {\n            const { token, interceptor } = setPart(\n              config.$externals,\n              resolver,\n              symbol\n            );\n            Container.set(token, interceptor);\n            interceptors.push(token);\n          }\n          resolver = Object.keys(Roots)\n            .map(node => {\n              const types = Object.keys(Roots[node]).filter(key =>\n                resolver.includes(key)\n              );\n              if (types.length) {\n                return types[0];\n              }\n            })\n            .filter(i => !!i)[0] as GlobalUnion;\n        }\n      }\n      types[type][key] = ParseTypesSchema(\n        resolver,\n        key,\n        type,\n        interceptors,\n        types\n      );\n    });\n    buildedSchema[type] = new GraphQLObjectType({\n      name: type,\n      fields: () => types[type]\n    });\n  });\n}\n","export function isFunction<T>(object: T) {\n  return typeof object === 'function';\n}\n","import { isFunction } from './isFunction';\n\n/**\n * Gets first item of the object without iterating all objects inside\n */\nexport function getFirstItem<T>(object: T) {\n  if (!object) {\n    return null;\n  }\n  let firstKey: string;\n  for (var key in object) {\n    firstKey = key;\n    break;\n  }\n  if (!object[firstKey]) {\n    throw new Error(`Missing method ${firstKey}`);\n  }\n  if (isFunction(object[firstKey])) {\n    object = object[firstKey];\n  }\n  return object;\n}\n","import { GraphQLInputObjectType, GraphQLNonNull } from 'graphql';\nimport { Container } from '@rxdi/core';\nimport { ParseArgs } from './parse-ast';\nimport { Config, TypesToken } from '../app/app.tokens';\n\nconst InputObjectTypes = new Map<string, GraphQLInputObjectType>();\n\nexport const buildArgumentsSchema = (config: Config, resolver: string) => {\n  let args = config.$resolvers[resolver].args || {};\n  let fields = {};\n  const Arguments = Container.get(TypesToken);\n  Object.keys(args).forEach(a => {\n    const name = args[a].replace('!', '');\n    if (Arguments.has(name)) {\n      let reusableType = new GraphQLInputObjectType({\n        name,\n        fields: () => Arguments.get(name)\n      });\n      if (InputObjectTypes.has(name)) {\n        reusableType = InputObjectTypes.get(name);\n      }\n      InputObjectTypes.set(name, reusableType);\n      if (args[a].includes('!')) {\n        fields = {\n          payload: {\n            type: new GraphQLNonNull(reusableType)\n          }\n        };\n      } else {\n        fields = {\n          payload: {\n            type: reusableType\n          }\n        };\n      }\n      return;\n    }\n    fields[a] = ParseArgs(args[a]);\n  });\n  return fields;\n};\n","import { Config, ResolverDependencies } from '../../../app/app.tokens';\nimport { isFunction } from '../../isFunction';\nimport { lazyTypes } from '../../lazy-types';\n\nimport { getFirstItem } from '../../get-first-item';\nimport { buildArgumentsSchema } from '../../parse-args-schema';\n\nimport { Container } from '@rxdi/core';\nimport { BootstrapService, GraphQLSchema } from '@gapi/core';\n\nexport function buildResolvers(\n  config: Config,\n  types,\n  buildedSchema: GraphQLSchema\n) {\n  Object.keys(config.$resolvers).forEach(resolver => {\n    const type = config.$resolvers[resolver].type;\n    const method = (\n      config.$resolvers[resolver].method || 'query'\n    ).toLocaleLowerCase();\n    let deps = config.$resolvers[resolver].deps || [];\n\n    const mapDependencies = <T>(\n      dependencies: ResolverDependencies[]\n    ): { [map: string]: ResolverDependencies } =>\n      dependencies\n        .map(({ provide, map }) => ({\n          container: Container.get<keyof T>(provide),\n          provide,\n          map\n        }))\n        .reduce((acc, curr) => ({ ...acc, [curr.map]: curr.container }), {});\n\n    if (!buildedSchema[type]) {\n      throw new Error(\n        `Missing type '${type}', Available types: '${Object.keys(\n          types\n        ).toString()}'`\n      );\n    }\n    let resolve = config.$resolvers[resolver].resolve;\n    if (resolve && !isFunction(resolve) && !Array.isArray(resolve)) {\n      /* Take the first method inside file for resolver */\n      resolve = getFirstItem(resolve);\n    }\n    const oldResolve = resolve;\n    resolve = isFunction(resolve) ? resolve : () => oldResolve;\n\n    Array.from(lazyTypes.keys()).forEach(type => {\n      Object.keys(lazyTypes.get(type)).forEach(k => {\n        buildedSchema[type].getFields()[k].type = buildedSchema[type];\n        // types[type].getFields()[k].resolve = resolve;\n      });\n    });\n    Container.get(BootstrapService).Fields[method][resolver] = {\n      type: buildedSchema[type],\n      method_name: resolver,\n      args: buildArgumentsSchema(config, resolver),\n      public: true,\n      method_type: method,\n      target: mapDependencies(deps),\n      resolve\n    } as any;\n  });\n}\n","import { GraphQLSchema } from 'graphql';\nimport { Config } from '../app/app.tokens';\nimport { buildArguments } from '../helpers/dynamic-schema/mutators/build-arguments';\nimport { buildTypes } from '../helpers/dynamic-schema/mutators/build-types';\nimport { buildResolvers } from '../helpers/dynamic-schema/mutators/build-resolvers';\n\nexport async function MakeAdvancedSchema(config: Config) {\n  const types = {};\n  const buildedSchema: GraphQLSchema = {} as any;\n  config.$args = config.$args || {};\n  config.$types = config.$types || {};\n  buildArguments(config);\n  buildTypes(config, types, buildedSchema);\n  buildResolvers(config, types, buildedSchema);\n  return buildedSchema;\n}\n","import {\n  GraphQLString,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLObjectType,\n  GraphQLBoolean\n} from 'graphql';\nimport { BootstrapService, Container } from '@gapi/core';\nimport { Config } from '../app/app.tokens';\n\nexport function MakeBasicSchema(config: Config) {\n  Object.keys(config.$resolvers).forEach(method_name => {\n    const resolve = config.$resolvers[method_name];\n    const fields = {};\n    const args = {};\n\n    Object.keys(resolve).forEach(key => {\n      const resolver = resolve[key];\n      if (typeof resolver === 'string') {\n        fields[key] = { type: GraphQLString };\n      }\n\n      if (typeof resolver === 'number') {\n        fields[key] = { type: GraphQLInt };\n      }\n      if (typeof resolver === 'boolean') {\n        fields[key] = { type: GraphQLBoolean };\n      }\n      if (typeof resolver !== 'string' && resolver.length) {\n        if (typeof resolver[0] === 'string') {\n          fields[key] = { type: new GraphQLList(GraphQLString) };\n        }\n\n        if (typeof resolver[0] === 'number') {\n          fields[key] = { type: new GraphQLList(GraphQLInt) };\n        }\n        if (typeof resolver[0] === 'boolean') {\n          fields[key] = { type: new GraphQLList(GraphQLBoolean) };\n        }\n      }\n    });\n    Container.get(BootstrapService).Fields.query[method_name] = {\n      type: new GraphQLObjectType({\n        name: `${method_name}_type`,\n        fields: () => fields\n      }),\n      args,\n      method_name,\n      public: true,\n      method_type: 'query',\n      target: () => {},\n      resolve: typeof resolve === 'function' ? resolve : () => resolve\n    } as any;\n  });\n}\n","import {\nimport { writeFile, readFileSync, exists } from 'fs';\nimport { promisify } from 'util';\nimport { includes, nextOrDefault } from '../helpers/args-extractors';\nimport { VoyagerModule } from '@gapi/voyager';\nimport { getConfig } from '../helpers/set-config';\nimport { basicTemplate } from '../helpers/basic.template';\nimport { MakeAdvancedSchema } from '../helpers/advanced-schema';\nimport { MakeBasicSchema } from '../helpers/basic-schema';\nimport { join } from 'path';\nimport {\nimport {\nimport { deep } from '../helpers/traverse/test';\nimport { traverseMap } from '../helpers/traverse-map';\nimport { watchBundles } from '../helpers/watch-bundles';\nimport { isGapiInstalled } from '../helpers/is-runner-installed';\nimport { ClientModule } from './client/client.module';\n  Module,\n  SCHEMA_OVERRIDE,\n  GraphQLSchema,\n  printSchema,\n  buildSchema,\n  mergeSchemas,\n  Container,\n  GRAPHQL_PLUGIN_CONFIG,\n  GraphQLDirective\n} from '@gapi/core';\n  TypesToken,\n  Config,\n  IsBundlerInstalled\n} from './app.tokens';\n  TranspileAndLoad,\n  TranspileAndGetAll\n} from '../helpers/transpile-and-load';\n\n\n@Module({\n  imports: [VoyagerModule.forRoot(), ClientModule],\n  providers: [\n    {\n      provide: TypesToken,\n      useValue: new Map()\n    },\n    {\n      provide: IsBundlerInstalled,\n      useValue: { parcel: false, gapi: false }\n    },\n    {\n      provide: SCHEMA_OVERRIDE,\n      useFactory: () => (schema: GraphQLSchema) => {\n        let externalSchema;\n        try {\n          const config = JSON.parse(\n            readFileSync(join(process.cwd(), 'gj.json'), {\n              encoding: 'utf-8'\n            })\n          );\n          config.$schema = config.$schema || nextOrDefault('--schema', false);\n          if (config.$schema) {\n            externalSchema = readFileSync(config.$schema, {\n              encoding: 'utf-8'\n            });\n            externalSchema = buildSchema(externalSchema);\n          }\n        } catch (e) {}\n        const schemas = [externalSchema, schema].filter(i => !!i);\n        let mergedSchemas: GraphQLSchema;\n        if (schemas.length === 1) {\n          mergedSchemas = schema;\n        } else {\n          mergedSchemas = mergeSchemas({\n            schemas\n          });\n        }\n\n        if (includes('--verbose')) {\n          console.log(`\nSchema:\n${printSchema(mergedSchemas)}\n                  `);\n        }\n\n        if (process.argv.toString().includes('--generate')) {\n          promisify(writeFile)('./schema.graphql', printSchema(mergedSchemas), {\n            encoding: 'utf-8'\n          }).then(() => {\n            console.log('Schema created!');\n            process.exit(0);\n          });\n        }\n        return mergedSchemas;\n      }\n    },\n    {\n      provide: Config,\n      useFactory: async () => {\n        let config = await getConfig(\n          nextOrDefault('--config', 'graphqj-config')\n        );\n        if (!config) {\n          config = await getConfig('gj');\n        }\n        if (!config) {\n          config = basicTemplate;\n        }\n        return config['default'] || config;\n      }\n    },\n    {\n      provide: 'Run',\n      deps: [\n        Config,\n        GRAPHQL_PLUGIN_CONFIG,\n        IsBundlerInstalled\n      ],\n      lazy: true,\n      useFactory: async (\n        config: Config,\n        graphqlConfig: GRAPHQL_PLUGIN_CONFIG,\n        isBundlerInstalled: IsBundlerInstalled\n      ) => {\n        config = await config;\n        config = await deep(config)\n        isBundlerInstalled.gapi = await isGapiInstalled();\n        if (config.$externals) {\n          const compiledPaths = await TranspileAndGetAll(\n            config.$externals,\n            './.gj/out'\n          );\n          config.$externals = compiledPaths.map(external => {\n            if (external.file.includes('.ts')) {\n              external.module = require(external.transpiledFile);\n            } else {\n              const m = require('esm')(module)(\n                join(process.cwd(), external.file)\n              );\n              external.module = m['default'] || m;\n            }\n            Container.set(external.map, external.module);\n            return external;\n          });\n        }\n\n        let filePath = join(process.cwd(), config.$directives || '');\n        let directives: GraphQLDirective[] | any[];\n\n        if ((await promisify(exists)(filePath)) && filePath !== process.cwd()) {\n          if (filePath.includes('.ts')) {\n            directives = await TranspileAndLoad(\n              config.$directives.replace('.', ''),\n              './.gj/out'\n            );\n          } else {\n            directives = require('esm')(module)(filePath);\n          }\n          graphqlConfig.directives = (await Promise.all(\n            Object.keys(directives).map(d =>\n              typeof directives[d] === 'function' ? directives[d]() : null\n            )\n          )).filter(i => !!i);\n        }\n\n        if (config.$mode === 'basic') {\n          await MakeBasicSchema(config);\n        }\n        if (config.$mode === 'advanced') {\n          await MakeAdvancedSchema(config);\n        }\n        if (includes('--hot-reload')) {\n          config.$externals.forEach(e => traverseMap.push({parent: null, path: e.file}))\n          watchBundles(traverseMap.map(f => f.path), config)\n        }\n        console.log(\n          'You can extract this schema by running --generate command'\n        );\n        return true;\n      }\n    }\n  ]\n})\nexport class AppModule {}\n","import { spawn, ChildProcessWithoutNullStreams } from 'child_process';\nimport { Observable } from 'rxjs';\n\nexport const SelfChild = (configFile: string) => {\n  return new Observable<ChildProcessWithoutNullStreams>(observer => {\n    const args = []\n    args.push('--config')\n    args.push(configFile)\n    const child = spawn('gj', args);\n    child.stdout.pipe(process.stdout);\n    child.stderr.pipe(process.stderr);\n    process.on('exit', () => child.kill());\n    observer.next(child);\n    return () => {\n      observer.complete();\n      child.kill();\n      console.log(`Child process: ${child.pid} killed`);\n    };\n  });\n};\n","import { BootstrapFramework } from '@rxdi/core';\nimport { AppModule } from './app/app.module';\nimport { CoreModule } from '@gapi/core';\nimport { nextOrDefault, includes } from './helpers/args-extractors';\nimport { writeFile, existsSync } from 'fs';\nimport { promisify } from 'util';\nimport { watch } from 'chokidar';\nimport { SelfChild } from './helpers/self-child';\nimport { Subscription } from 'rxjs';\n\nif (includes('--watch')) {\n  let subscription: Subscription;\n  const configPath = nextOrDefault('--config');\n  if (!existsSync(configPath)) {\n    throw new Error(`File missing ${configPath}`);\n  }\n  const ignored = (p: string) => p.includes('node_modules');\n\n  watch(configPath, { ignored }).on('change', async (event, path) => {\n    if (subscription) {\n      subscription.unsubscribe();\n    }\n    subscription = SelfChild(configPath).subscribe(process => {\n      console.log('Child process started: ', process.pid);\n    });\n  });\n\n  watch(configPath, { ignored }).on('ready', async (event, path) => {\n    if (subscription) {\n      subscription.unsubscribe();\n    }\n    subscription = SelfChild(configPath).subscribe(process => {\n      console.log('Child process started: ', process.pid);\n    });\n  });\n} else if (includes('init')) {\n  if (includes('advanced')) {\n    promisify(writeFile)(\n      './gj.json',\n      `\n{\n  \"$mode\": \"advanced\",\n  \"$types\": {\n    \"user\": {\n      \"name\": \"String\",\n      \"email\": \"String\",\n      \"phone\": \"Number\",\n      \"arrayOfNumbers\": \"Number[]\",\n      \"arrayOfStrings\": \"String[]\"\n    }\n  },\n  \"$resolvers\": {\n    \"findUser\": {\n      \"type\": \"user\",\n      \"resolve\": {\n        \"name\": \"Kristiyan Tachev\",\n        \"email\": \"test@gmail.com\",\n        \"phone\": 414141,\n        \"arrayOfNumbers\": [515151, 412414],\n        \"arrayOfStrings\": [\"515151\", \"412414\"]\n      }\n    }\n  }\n}`,\n      { encoding: 'utf-8' }\n    );\n  } else if (includes('es6')) {\n    promisify(writeFile)(\n      './gj.js',\n      `\nexport default {\n  $mode: 'advanced',\n  $types: {\n    user: {\n      name: 'String',\n      email: 'String',\n      phone: 'Number',\n      arrayOfNumbers: 'Number[]',\n      arrayOfStrings: 'String[]'\n    }\n  },\n  $resolvers: {\n    findUser: {\n      type: 'user',\n      args: {\n        userId: \"String!\",\n        userId2: \"String\",\n      },\n      resolve: async (root, payload, context) => ({\n        name: 'Kristiyan Tachev',\n        email: 'test@gmail.com',\n        phone: 4141423,\n        arrayOfNumbers: [515151, 412414],\n        arrayOfStrings: ['515151', '412414']\n      })\n    }\n  }\n};\n`,\n      { encoding: 'utf-8' }\n    );\n  } else if (includes('typescript')) {\n    promisify(writeFile)(\n      './gj.ts',\n      `\nexport default {\n  $mode: 'advanced',\n  $types: {\n    user: {\n      name: 'String',\n      email: 'String',\n      phone: 'Number',\n      arrayOfNumbers: 'Number[]',\n      arrayOfStrings: 'String[]'\n    }\n  },\n  $resolvers: {\n    findUser: {\n      type: 'user',\n      args: {\n        userId: \"String!\",\n        userId2: \"String\",\n      },\n      resolve: async (root, payload: { userId: string; userId2?: string }) => ({\n        name: 'Kristiyan Tachev',\n        email: 'test@gmail.com',\n        phone: 4141423,\n        arrayOfNumbers: [515151, 412414],\n        arrayOfStrings: ['515151', '412414']\n      })\n    }\n  }\n};\n`,\n      { encoding: 'utf-8' }\n    );\n  } else if (includes('yml')) {\n    promisify(writeFile)(\n      './gj.yml',\n      `\n$mode: advanced\n$types:\n  user:\n    name: String\n    email: String\n    phone: Number\n    arrayOfNumbers: Number[]\n    arrayOfStrings: String[]\n\n$resolvers:\n  findUser:\n    type: user\n    args:\n      userId: String\n    resolve:\n      name: Kristiyan Tachev\n      email: test@gmail.com\n      phone: 414141\n      arrayOfNumbers: \n        - 515151\n        - 412414\n      arrayOfStrings:\n        - '515151'\n        - '412414'\n\n  findUser2:\n    type: user\n    args:\n      userId: String!\n    resolve:\n      name: Kristiyan Tachev\n      email: test@gmail.com\n      phone: 414141\n      arrayOfNumbers: \n        - 515151\n        - 412414\n      arrayOfStrings:\n        - '515151'\n        - '412414'\n`,\n      { encoding: 'utf-8' }\n    );\n  } else {\n    promisify(writeFile)(\n      './gj.json',\n      `\n{\n  \"$mode\": \"basic\",\n  \"$resolvers\": {\n    \"findUser\": {\n      \"name\": \"Kristiyan Tachev\",\n      \"email\": \"test@gmail.com\",\n      \"phone\": 414141,\n      \"arrayOfNumbers\": [515151, 412414],\n      \"arrayOfStrings\": [\"515151\", \"412414\"]\n    }\n  }\n}\n`,\n      { encoding: 'utf-8' }\n    );\n  }\n} else {\n  BootstrapFramework(AppModule, [\n    CoreModule.forRoot({\n      graphql: {\n        openBrowser: nextOrDefault('--random', true, v =>\n          v === 'true' ? false : true\n        ),\n        buildAstDefinitions: false // Removed ast definition since directives are lost\n      },\n      server: {\n        randomPort: nextOrDefault('--random', false),\n        hapi: {\n          port: nextOrDefault('--port', 9000, p => Number(p))\n        }\n      }\n    })\n  ]).subscribe(() => console.log('Started'), console.log.bind(console));\n}\n"]}